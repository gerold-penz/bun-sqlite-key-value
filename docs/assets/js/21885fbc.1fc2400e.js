"use strict";(self.webpackChunkbun_sqlite_key_value_docs=self.webpackChunkbun_sqlite_key_value_docs||[]).push([[3164],{564:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>c,frontMatter:()=>l,metadata:()=>n,toc:()=>u});const n=JSON.parse('{"id":"read_write/read_multiple_values","title":"Read Multiple Values","description":"Reads the data from the database and returns an array with the values.","source":"@site/docs/040_read_write/040_read_multiple_values.md","sourceDirName":"040_read_write","slug":"/read_write/read_multiple_values","permalink":"/bun-sqlite-key-value/read_write/read_multiple_values","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":40,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Read and Write Value (in one step)","permalink":"/bun-sqlite-key-value/read_write/read_write_value_one_step"},"next":{"title":"Write Multiple Items","permalink":"/bun-sqlite-key-value/read_write/write_multiple_items"}}');var s=a(4848),r=a(8453);const l={},i="Read Multiple Values",d={},u=[{value:"startsWithOrKeys",id:"startswithorkeys",level:2},{value:"Example",id:"example",level:2}];function o(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"read-multiple-values",children:"Read Multiple Values"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"getValues(startsWithOrKeys?: string | string[]): any[]\n\n<store>.values\n"})}),"\n",(0,s.jsx)(t.p,{children:"Reads the data from the database and returns an array with the values."}),"\n",(0,s.jsx)(t.h2,{id:"startswithorkeys",children:"startsWithOrKeys"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"undefined"}),": Returns an array with all values."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"string"}),": Returns an array with all values whose keys begin with the passed string.\nIf you plan the names of the keys well, more complex data can be stored.\nIt is advisable to divide keys into ranges using separators.\nFor example ",(0,s.jsx)(t.code,{children:'"language:de"'}),", ",(0,s.jsx)(t.code,{children:'"language:en"'}),", ",(0,s.jsx)(t.code,{children:'"language:it"'}),".\nA search for ",(0,s.jsx)(t.code,{children:'"language:"'})," would return all languages."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"string[]"}),": Array with keys. The returned array is exactly\nthe same size as the passed array.\nItems that are not found are returned as ",(0,s.jsx)(t.code,{children:"undefined"}),".\nOnly exact matches with the keys are returned."]}),"\n",(0,s.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:'import { BunSqliteKeyValue } from "bun-sqlite-key-value"\n\nconst store = new BunSqliteKeyValue()\n\nstore.set("language:de", "German")\nstore.set("language:en", "English")\nstore.set("language:it", "Italian")\n\nstore.getValues() // --\x3e [ "German", "English", "Italian" ]\nstore.getValues("language:") // --\x3e [ "German", "English", "Italian" ]\n\nstore.values // --\x3e [ "German", "English", "Italian" ]\n'})})]})}function c(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},8453:(e,t,a)=>{a.d(t,{R:()=>l,x:()=>i});var n=a(6540);const s={},r=n.createContext(s);function l(e){const t=n.useContext(r);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);