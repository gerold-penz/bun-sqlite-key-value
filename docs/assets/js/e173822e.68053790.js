"use strict";(self.webpackChunkbun_sqlite_key_value_docs=self.webpackChunkbun_sqlite_key_value_docs||[]).push([[4234],{5528:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"read_write/read_write_value_one_step","title":"Read and Write Value (in one step)","description":"Atomically sets key to value and returns the old value stored at key.","source":"@site/docs/040_read_write/030_read_write_value_one_step.md","sourceDirName":"040_read_write","slug":"/read_write/read_write_value_one_step","permalink":"/bun-sqlite-key-value/read_write/read_write_value_one_step","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":30,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Write Value","permalink":"/bun-sqlite-key-value/read_write/write_value"},"next":{"title":"Read Multiple Values","permalink":"/bun-sqlite-key-value/read_write/read_multiple_values"}}');var a=n(4848),r=n(8453);const i={},l="Read and Write Value (in one step)",o={},d=[{value:"key",id:"key",level:2},{value:"value",id:"value",level:2},{value:"ttlMs (optional)",id:"ttlms-optional",level:2},{value:"Example",id:"example",level:2}];function u(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"read-and-write-value-in-one-step",children:"Read and Write Value (in one step)"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:"getSet(key: string, value: any, ttlMs?: number)\n"})}),"\n",(0,a.jsxs)(t.p,{children:["Atomically sets key to value and returns the old value stored at key.\nInspired by: ",(0,a.jsx)(t.a,{href:"https://docs.keydb.dev/docs/commands/#getset",children:"https://docs.keydb.dev/docs/commands/#getset"})]}),"\n",(0,a.jsx)(t.h2,{id:"key",children:"key"}),"\n",(0,a.jsx)(t.p,{children:"The key must be a string."}),"\n",(0,a.jsx)(t.h2,{id:"value",children:"value"}),"\n",(0,a.jsxs)(t.p,{children:["The value can be any object that can be serialized with\n",(0,a.jsx)(t.a,{href:"https://github.com/nodejs/node/blob/main/doc/api/v8.md#serialization-api",children:"v8"}),".\nThis means that not only simple data types (string, number) are possible,\nbut also more complex types such as sets or maps.\nYou can find a list of the\n",(0,a.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm#supported_types",children:"supported data types"})," here."]}),"\n",(0,a.jsx)(t.h2,{id:"ttlms-optional",children:"ttlMs (optional)"}),"\n",(0,a.jsx)(t.p,{children:'"Time to live" in milliseconds. After this time,\nthe item becomes invalid and is deleted from the database\nthe next time it is accessed or when the application is started.\nSet the value to 0 if you want to explicitly deactivate the process.'}),"\n",(0,a.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:'import { BunSqliteKeyValue } from "bun-sqlite-key-value"\n\nconst store = new BunSqliteKeyValue()\n\nstore.set("key-1", "string-value-1")\nstore.getSet("key-1", "string-value-2")) // --\x3e "string-value-1"\nstore.get("key-1") // --\x3e "string-value-2"\n'})})]})}function c(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>l});var s=n(6540);const a={},r=s.createContext(a);function i(e){const t=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);