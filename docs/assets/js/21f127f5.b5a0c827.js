"use strict";(self.webpackChunkbun_sqlite_key_value_docs=self.webpackChunkbun_sqlite_key_value_docs||[]).push([[965],{2671:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"hash_map/count_fields","title":"hGetCount() - Count Fields","description":"Returns the number of fields contained in the hash stored at key.","source":"@site/docs/120_hash_map/060_count_fields.md","sourceDirName":"120_hash_map","slug":"/hash_map/count_fields","permalink":"/bun-sqlite-key-value/hash_map/count_fields","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":60,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"hHasField() - Has Field","permalink":"/bun-sqlite-key-value/hash_map/has_field"},"next":{"title":"hGetFields() - Get All Field Names","permalink":"/bun-sqlite-key-value/hash_map/get_all_field_names"}}');var a=n(4848),l=n(8453);const o={},i="hGetCount() - Count Fields",r={},d=[{value:"key",id:"key",level:2},{value:"Example",id:"example",level:2}];function c(e){const t={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"hgetcount---count-fields",children:"hGetCount() - Count Fields"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:"hGetCount(key: string)\n"})}),"\n",(0,a.jsxs)(t.p,{children:["Returns the number of fields contained in the hash stored at ",(0,a.jsx)(t.code,{children:"key"}),"."]}),"\n",(0,a.jsxs)(t.blockquote,{children:["\n",(0,a.jsxs)(t.p,{children:["Do not use the hash functions with several very large amounts (megabytes) of data or blobs.\nThis is because the entire data record with all fields is always read and written.\nIt is better to use ",(0,a.jsx)(t.code,{children:"setValues()"})," and ",(0,a.jsx)(t.code,{children:"getValues()"})," for large amounts of data."]}),"\n"]}),"\n",(0,a.jsxs)(t.p,{children:["Inspired by: ",(0,a.jsx)(t.a,{href:"https://docs.keydb.dev/docs/commands/#hlen",children:"https://docs.keydb.dev/docs/commands/#hlen"})]}),"\n",(0,a.jsx)(t.h2,{id:"key",children:"key"}),"\n",(0,a.jsx)(t.p,{children:"The key must be a string."}),"\n",(0,a.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:'import { BunSqliteKeyValue } from "bun-sqlite-key-value"\n\nconst store = new BunSqliteKeyValue()\n\nstore.hGetCount("key-1") // --\x3e undefined\nstore.hSet("key-1", "field-1", "value-1")\nstore.hGetCount("key-1") // --\x3e 1\n'})})]})}function u(e={}){const{wrapper:t}={...(0,l.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>i});var s=n(6540);const a={},l=s.createContext(a);function o(e){const t=s.useContext(l);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),s.createElement(l.Provider,{value:t},e.children)}}}]);