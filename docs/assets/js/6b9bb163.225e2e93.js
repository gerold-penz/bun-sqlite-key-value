"use strict";(self.webpackChunkbun_sqlite_key_value_docs=self.webpackChunkbun_sqlite_key_value_docs||[]).push([[6024],{3036:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>c,frontMatter:()=>r,metadata:()=>a,toc:()=>o});const a=JSON.parse('{"id":"read_write/write_value","title":"Write Value","description":"Writes a value into the database and returns the key.","source":"@site/docs/040_read_write/020_write_value.md","sourceDirName":"040_read_write","slug":"/read_write/write_value","permalink":"/bun-sqlite-key-value/read_write/write_value","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":20,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Read Value","permalink":"/bun-sqlite-key-value/read_write/read_value"},"next":{"title":"Read and Write Value (in one step)","permalink":"/bun-sqlite-key-value/read_write/read_write_value_one_step"}}');var i=n(4848),s=n(8453);const r={},l="Write Value",d={},o=[{value:"key",id:"key",level:2},{value:"value",id:"value",level:2},{value:"ttlMs (optional)",id:"ttlms-optional",level:2},{value:"Example",id:"example",level:2}];function u(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"write-value",children:"Write Value"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:"set(key: string | undefined, value: any, ttlMs?: number): Key\n\ndata.<key> = <value>\ndata[<key>] = <value>\n"})}),"\n",(0,i.jsx)(t.p,{children:"Writes a value into the database and returns the key."}),"\n",(0,i.jsx)(t.h2,{id:"key",children:"key"}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"key"})," can be a string or ",(0,i.jsx)(t.code,{children:"undefined"}),".\nIf the ",(0,i.jsx)(t.code,{children:"key"})," is ",(0,i.jsx)(t.code,{children:"undefined"}),", a UUID is used instead."]}),"\n",(0,i.jsx)(t.h2,{id:"value",children:"value"}),"\n",(0,i.jsxs)(t.p,{children:["The value can be any object that can be serialized with\n",(0,i.jsx)(t.a,{href:"https://github.com/nodejs/node/blob/main/doc/api/v8.md#serialization-api",children:"v8"}),".\nThis means that not only simple data types (string, number) are possible,\nbut also more complex types such as sets or maps.\nYou can find a list of the\n",(0,i.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm#supported_types",children:"supported data types"})," here."]}),"\n",(0,i.jsx)(t.h2,{id:"ttlms-optional",children:"ttlMs (optional)"}),"\n",(0,i.jsx)(t.p,{children:'"Time to live" in milliseconds. After this time,\nthe item becomes invalid and is deleted from the database\nthe next time it is accessed or when the application is started.\nSet the value to 0 if you want to explicitly deactivate the process.'}),"\n",(0,i.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:'import { BunSqliteKeyValue } from "bun-sqlite-key-value"\n\nconst store = new BunSqliteKeyValue()\n\n// Stays in database\nstore.set("myKey1", "my-value")\n\nstore.data.myKey2 = "my-value"\nstore.data["myKey3"] = "my-value"\n\n// Becomes invalid after 30 seconds\nstore.set("myKey6", "item-with-ttl", 30000)\n'})})]})}function c(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>l});var a=n(6540);const i={},s=a.createContext(i);function r(e){const t=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),a.createElement(s.Provider,{value:t},e.children)}}}]);