"use strict";(self.webpackChunkbun_sqlite_key_value_docs=self.webpackChunkbun_sqlite_key_value_docs||[]).push([[1260],{1265:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"read_write/read_write_binary_files_iImages","title":"Read and Write Binary Files (Images)","description":"SQLite has no problem with images and other binaries.","source":"@site/docs/040_read_write/080_read_write_binary_files_iImages.md","sourceDirName":"040_read_write","slug":"/read_write/read_write_binary_files_iImages","permalink":"/bun-sqlite-key-value/read_write/read_write_binary_files_iImages","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":80,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Read Multiple Items","permalink":"/bun-sqlite-key-value/read_write/read_multiple_items"},"next":{"title":"Undocumented","permalink":"/bun-sqlite-key-value/read_write/undocumented"}}');var a=t(4848),i=t(8453);const s={},l="Read and Write Binary Files (Images)",o={},c=[{value:"Example (async)",id:"example-async",level:2},{value:"Example (sync)",id:"example-sync",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"read-and-write-binary-files-images",children:"Read and Write Binary Files (Images)"})}),"\n",(0,a.jsx)(n.p,{children:"SQLite has no problem with images and other binaries.\nThe maximum size of a binary file is 2 GB."}),"\n",(0,a.jsx)(n.h2,{id:"example-async",children:"Example (async)"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'import { BunSqliteKeyValue } from "bun-sqlite-key-value"\n\nconst store = new BunSqliteKeyValue()\n\n// Read file from filesystem\nconst sourceFile = Bun.file("<Source File Path>")\n\n// Write ArrayBuffer into database (async !!!)\nstore.set("my-image", await sourceFile.arrayBuffer())\n\n// Read ArrayBuffer from database\nconst targetArrayBuffer = store.get("my-image")\n\n// Write target file to filesystem (async !!!)\nawait Bun.write(Bun.file("<Target File Path>"), targetArrayBuffer)\n'})}),"\n",(0,a.jsx)(n.h2,{id:"example-sync",children:"Example (sync)"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'import { BunSqliteKeyValue } from "bun-sqlite-key-value"\nimport { readFileSync, writeFileSync } from "node:fs"\n\nconst store = new BunSqliteKeyValue()\n\n// Read content from filesystem\nconst sourceContent = readFileSync("<Source File Path>")\n\n// Write Buffer into database\nstore.set("my-image", sourceContent)\n\n// Read Buffer from database\nconst targetBuffer = store.get("my-image")\n\n// Write target file to filesystem\nwriteFileSync("<Target File Path>", targetBuffer)\n'})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>l});var r=t(6540);const a={},i=r.createContext(a);function s(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);