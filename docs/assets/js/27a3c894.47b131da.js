"use strict";(self.webpackChunkbun_sqlite_key_value_docs=self.webpackChunkbun_sqlite_key_value_docs||[]).push([[6636],{6298:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>d});const l=JSON.parse('{"id":"hash_map_object/write_multiple_values","title":"Hash - Write Multiple Values","description":"Like hSet(), with the difference that several fields","source":"@site/docs/120_hash_map_object/030_write_multiple_values.md","sourceDirName":"120_hash_map_object","slug":"/hash_map_object/write_multiple_values","permalink":"/bun-sqlite-key-value/hash_map_object/write_multiple_values","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":30,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Hash - Read Value","permalink":"/bun-sqlite-key-value/hash_map_object/read_value"},"next":{"title":"Hash - Read Multiple Values","permalink":"/bun-sqlite-key-value/hash_map_object/read_multiple_values"}}');var n=s(4848),a=s(8453);const i={},r="Hash - Write Multiple Values",o={},d=[{value:"key",id:"key",level:2},{value:"fields",id:"fields",level:2},{value:"ttlMs (optional)",id:"ttlms-optional",level:2},{value:"Example",id:"example",level:2}];function c(e){const t={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"hash---write-multiple-values",children:"Hash - Write Multiple Values"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:"hmSet(key: string, fields: {[field: string]: T}, ttlMs?: number)\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Like ",(0,n.jsx)(t.code,{children:"hSet()"}),", with the difference that several fields\nare written to the database in one go."]}),"\n",(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsxs)(t.p,{children:["Do not use the hash functions with several very large amounts (megabytes) of data or blobs.\nThis is because the entire data record with all fields is always read and written.\nIt is better to use ",(0,n.jsx)(t.code,{children:"setValues()"})," and ",(0,n.jsx)(t.code,{children:"getValues()"})," for large amounts of data."]}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["Inspired by: ",(0,n.jsx)(t.a,{href:"https://docs.keydb.dev/docs/commands/#hmset",children:"https://docs.keydb.dev/docs/commands/#hmset"})]}),"\n",(0,n.jsx)(t.h2,{id:"key",children:"key"}),"\n",(0,n.jsx)(t.p,{children:"The key must be a string."}),"\n",(0,n.jsx)(t.h2,{id:"fields",children:"fields"}),"\n",(0,n.jsx)(t.p,{children:"Object with field names (keys) and values."}),"\n",(0,n.jsx)(t.h2,{id:"ttlms-optional",children:"ttlMs (optional)"}),"\n",(0,n.jsxs)(t.p,{children:['"Time to live" in milliseconds (for the database line, marked with ',(0,n.jsx)(t.code,{children:"key"}),").\nAfter this time, the item becomes invalid and is deleted from the database\nthe next time it is accessed or when the application is started.\nSet the value to 0 if you want to explicitly deactivate the process."]}),"\n",(0,n.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:'import { BunSqliteKeyValue } from "bun-sqlite-key-value"\n\nconst store = new BunSqliteKeyValue()\n\nstore.hmSet("my-key", {\n    "field-1": "value-1",\n    "field-2": "value-2",\n    "field-3": "value-3"\n})\n'})})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>i,x:()=>r});var l=s(6540);const n={},a=l.createContext(n);function i(e){const t=l.useContext(a);return l.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),l.createElement(a.Provider,{value:t},e.children)}}}]);