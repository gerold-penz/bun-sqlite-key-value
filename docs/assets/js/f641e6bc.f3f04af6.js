"use strict";(self.webpackChunkbun_sqlite_key_value_docs=self.webpackChunkbun_sqlite_key_value_docs||[]).push([[5254],{8357:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>c,frontMatter:()=>l,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"keys/read_multiple_keys","title":"Read Multiple Keys","description":"Reads the keys from the database and returns an array.","source":"@site/docs/050_keys/020_read_multiple_keys.md","sourceDirName":"050_keys","slug":"/keys/read_multiple_keys","permalink":"/bun-sqlite-key-value/keys/read_multiple_keys","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":20,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Has (key)","permalink":"/bun-sqlite-key-value/keys/has_key"},"next":{"title":"Rename Key","permalink":"/bun-sqlite-key-value/keys/rename_key"}}');var a=s(4848),r=s(8453);const l={},i="Read Multiple Keys",d={},o=[{value:"startsWithOrKeys",id:"startswithorkeys",level:2},{value:"Example",id:"example",level:2}];function u(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"read-multiple-keys",children:"Read Multiple Keys"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"getKeys(startsWithOrKeys?: string | string[]): string[]\n\n<store>.keys // --\x3e all keys\n"})}),"\n",(0,a.jsx)(n.p,{children:"Reads the keys from the database and returns an array."}),"\n",(0,a.jsx)(n.h2,{id:"startswithorkeys",children:"startsWithOrKeys"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"undefined"}),": Returns all keys in an array."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"string"}),": Returns an array with the keys that begin with the passed string.\nIf you plan the names of the keys well, more complex data can be stored.\nIt is advisable to divide keys into ranges using separators.\nFor example ",(0,a.jsx)(n.code,{children:'"language:de"'}),", ",(0,a.jsx)(n.code,{children:'"language:en"'}),", ",(0,a.jsx)(n.code,{children:'"language:it"'}),".\nA search for ",(0,a.jsx)(n.code,{children:'"language:"'})," would return all languages."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"string[]"}),": Array with keys.\nOnly exact matches with the keys are returned."]}),"\n",(0,a.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'import { BunSqliteKeyValue } from "bun-sqlite-key-value"\n\nconst store = new BunSqliteKeyValue()\n\nstore.set("language:de", "German")\nstore.set("language:en", "English")\nstore.set("language:es", "Esperanto")\n\nstore.getKeys() // --\x3e ["language:de", "language:en", "language:es"]\n\nstore.keys // --\x3e ["language:de", "language:en", "language:es"]\n\nstore.getKeys("language:e") // --\x3e ["language:en", "language:es"]\n\nstore.getKeys(["language:de", "language:fr"]) // --\x3e ["language:de"]\n\n'})})]})}function c(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>i});var t=s(6540);const a={},r=t.createContext(a);function l(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);