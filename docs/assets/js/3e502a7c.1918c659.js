"use strict";(self.webpackChunkbun_sqlite_key_value_docs=self.webpackChunkbun_sqlite_key_value_docs||[]).push([[6909],{1673:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>n,toc:()=>o});const n=JSON.parse('{"id":"hash_map/read_multiple_values","title":"hmGet() - Read Multiple Values","description":"Like hGet(), with the difference that several fields are read in one go.","source":"@site/docs/120_hash_map/040_read_multiple_values.md","sourceDirName":"120_hash_map","slug":"/hash_map/read_multiple_values","permalink":"/bun-sqlite-key-value/hash_map/read_multiple_values","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":40,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"hmSet() - Write Multiple Values","permalink":"/bun-sqlite-key-value/hash_map/write_multiple_values"},"next":{"title":"hHasField() - Has Field","permalink":"/bun-sqlite-key-value/hash_map/has_field"}}');var l=s(4848),a=s(8453);const i={},r="hmGet() - Read Multiple Values",d={},o=[{value:"key",id:"key",level:2},{value:"fields",id:"fields",level:2},{value:"Example",id:"example",level:2}];function u(e){const t={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(t.header,{children:(0,l.jsx)(t.h1,{id:"hmget---read-multiple-values",children:"hmGet() - Read Multiple Values"})}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-typescript",children:"hmGet(key: string, fields: fields?: string[])\n"})}),"\n",(0,l.jsxs)(t.p,{children:["Like ",(0,l.jsx)(t.code,{children:"hGet()"}),", with the difference that several fields are read in one go."]}),"\n",(0,l.jsxs)(t.blockquote,{children:["\n",(0,l.jsxs)(t.p,{children:["Do not use the hash functions with several very large amounts (megabytes) of data or blobs.\nThis is because the entire data record with all fields is always read and written.\nIt is better to use ",(0,l.jsx)(t.code,{children:"setValues()"})," and ",(0,l.jsx)(t.code,{children:"getValues()"})," for large amounts of data."]}),"\n"]}),"\n",(0,l.jsxs)(t.p,{children:["Inspired by: ",(0,l.jsx)(t.a,{href:"https://docs.keydb.dev/docs/commands/#hmget",children:"https://docs.keydb.dev/docs/commands/#hmget"})]}),"\n",(0,l.jsx)(t.h2,{id:"key",children:"key"}),"\n",(0,l.jsx)(t.p,{children:"The key must be a string."}),"\n",(0,l.jsx)(t.h2,{id:"fields",children:"fields"}),"\n",(0,l.jsx)(t.p,{children:"Array with field names.\nIf the parameter is not specified, all fields are returned."}),"\n",(0,l.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-typescript",children:'import { BunSqliteKeyValue } from "bun-sqlite-key-value"\n\nconst store = new BunSqliteKeyValue()\n\nstore.hmSet("my-key", {\n    "field-1": "value-1",\n    "field-2": "value-2"\n})\n\nstore.hmGet(KEY_1, ["field-1", "field-100"]) // --\x3e {\n//   "field-1": "value-1",\n//   "field-100": undefined,\n// }\n'})})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,l.jsx)(t,{...e,children:(0,l.jsx)(u,{...e})}):u(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>i,x:()=>r});var n=s(6540);const l={},a=n.createContext(l);function i(e){const t=n.useContext(a);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:i(e.components),n.createElement(a.Provider,{value:t},e.children)}}}]);