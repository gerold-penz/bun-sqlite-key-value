"use strict";(self.webpackChunkbun_sqlite_key_value_docs=self.webpackChunkbun_sqlite_key_value_docs||[]).push([[2196],{1959:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>r,contentTitle:()=>d,default:()=>c,frontMatter:()=>l,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"hash_map/has_field","title":"hHasField() - Has Field","description":"Returns if field is an existing field in the hash stored at key.","source":"@site/docs/120_hash_map/050_has_field.md","sourceDirName":"120_hash_map","slug":"/hash_map/has_field","permalink":"/bun-sqlite-key-value/hash_map/has_field","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":50,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"hmGet() - Read Multiple Values","permalink":"/bun-sqlite-key-value/hash_map/read_multiple_values"},"next":{"title":"hGetCount() - Count Fields","permalink":"/bun-sqlite-key-value/hash_map/count_fields"}}');var i=n(4848),a=n(8453);const l={},d="hHasField() - Has Field",r={},o=[{value:"key",id:"key",level:2},{value:"field",id:"field",level:2},{value:"Example",id:"example",level:2}];function h(e){const s={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"hhasfield---has-field",children:"hHasField() - Has Field"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"hHasField(key: string, field: string)\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Returns if ",(0,i.jsx)(s.code,{children:"field"})," is an existing field in the hash stored at ",(0,i.jsx)(s.code,{children:"key"}),"."]}),"\n",(0,i.jsxs)(s.blockquote,{children:["\n",(0,i.jsxs)(s.p,{children:["Do not use the hash functions with several very large amounts (megabytes) of data or blobs.\nThis is because the entire data record with all fields is always read and written.\nIt is better to use ",(0,i.jsx)(s.code,{children:"setValues()"})," and ",(0,i.jsx)(s.code,{children:"getValues()"})," for large amounts of data."]}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:["Inspired by: ",(0,i.jsx)(s.a,{href:"https://docs.keydb.dev/docs/commands/#hexists",children:"https://docs.keydb.dev/docs/commands/#hexists"})]}),"\n",(0,i.jsx)(s.h2,{id:"key",children:"key"}),"\n",(0,i.jsx)(s.p,{children:"The key must be a string."}),"\n",(0,i.jsx)(s.h2,{id:"field",children:"field"}),"\n",(0,i.jsx)(s.p,{children:"The field name must be a string."}),"\n",(0,i.jsx)(s.h2,{id:"example",children:"Example"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:'import { BunSqliteKeyValue } from "bun-sqlite-key-value"\n\nconst store = new BunSqliteKeyValue()\n\nstore.hSet("key-1", "field-1", "value-1")\n\nstore.hHasField("key-1", "field-1") // --\x3e true\nstore.hHasField("key-1", "field-1") // --\x3e undefined\n'})})]})}function c(e={}){const{wrapper:s}={...(0,a.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>l,x:()=>d});var t=n(6540);const i={},a=t.createContext(i);function l(e){const s=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function d(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),t.createElement(a.Provider,{value:s},e.children)}}}]);